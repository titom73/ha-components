blueprint:
  name: "Daily Weather via Telegram (telegram_bot) — FR message + alerts + presence (+ date/heure unique)"
  description: >
    Envoie un message météo quotidien en français (avec bannière d’alerte météo facultative) à un ou plusieurs chats Telegram,
    et attache des snapshots d’une ou plusieurs caméras.
    Peut fonctionner :
      - chaque jour à une heure (input_datetime time-only)
      - une seule fois à une date+heure précise (input_datetime date+time).
    Ne s’exécute que si le booléen de présence choisi est sur ON (mode absence par défaut).
    Supporte la sélection d’un bot Telegram spécifique via config_entry_id.

  domain: automation

  input:
    time_helper:
      name: Daily time helper (input_datetime, time-only)
      description: "Si défini, déclenche chaque jour à cette heure."
      selector:
        entity:
          domain: input_datetime

    presence_boolean:
      name: Booléen Présence/Absence
      description: >
        Booléen qui contrôle l’exécution. L’automatisation ne s’exécute que si ce booléen est ON.
        Exemple typique : input_boolean.absent (ON = absent).
      selector:
        entity:
          domain: input_boolean

    indoor_temp:
      name: Capteur température pièce principale
      selector:
        entity:
          domain: sensor

    outdoor_temp:
      name: Capteur température extérieure
      selector:
        entity:
          domain: sensor

    cameras:
      name: Caméras pour snapshots
      description: "Une ou plusieurs caméras dont on prend un snapshot à envoyer."
      selector:
        entity:
          domain: camera
          multiple: true

    chat_ids:
      name: Chat IDs Telegram
      description: "Un ou plusieurs IDs numériques de chat pour votre bot Telegram."
      selector:
        text:
          multiple: true
          type: text

    weather_alert_sensor:
      name: (Optionnel) Capteur alerte météo
      description: "Capteur exposant les niveaux de vigilance (ex : intégration Météo-France)."
      default:
      selector:
        entity:
          domain: sensor

    telegram_config_entry_id:
      name: (Optionnel) Telegram bot config_entry_id
      description: >
        Si vous avez plusieurs bots Telegram, renseignez le config_entry_id du bot à utiliser.
        Laissez vide pour utiliser le bot par défaut.
      default: ""
      selector:
        text:
          type: text

mode: single
trace:
  stored_traces: 20

trigger:
  - id: daily_time
    trigger: time
    at: !input time_helper

condition:
  - condition: state
    entity_id: !input presence_boolean
    state: "on"

variables:
  ts: "{{ now().strftime('%Y%m%d-%H%M%S') }}"
  indoor_sensor: !input indoor_temp
  outdoor_sensor: !input outdoor_temp
  cams: !input cameras
  tg_chats: !input chat_ids
  alert_ent: !input weather_alert_sensor
  tg_cfg: !input telegram_config_entry_id

  # Define the macro with the SAME name you call later
  cam_slug: >-
    {% macro cam_slug(e) -%}
      {{ e | replace('.', '_') | replace(':', '_') }}
    {%- endmacro %}

  alert_text: >-
    {% if alert_ent %}
      {% set ok = states(alert_ent) not in ['unknown','unavailable', none] %}
      {% set attrs = states(alert_ent).attributes if ok else dict() %}
      {% set ignore = ['friendly_name','icon'] %}
      {% set order = ['Rouge','Orange','Jaune'] %}
      {% set emoji = {'Rouge':'🟥','Orange':'🟧','Jaune':'🟨','Vert':'🟩'} %}
      {% set ns = namespace(parts=[]) %}
      {% for level in order %}
        {% for k in attrs %}
          {% if k not in ignore and attrs[k]==level %}
            {% set ns.parts = ns.parts + [ emoji[level] ~ ' ' ~ k ~ ' (' ~ level ~ ')' ] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
      {% if ok and ns.parts|length>0 -%}
        __Attention, alerte météo en cours__ : {{ ns.parts | join(', ') }}
      {%- elif ok and states(alert_ent)!='Vert' -%}
        __Attention, alerte météo en cours__ : {{ emoji.get(states(alert_ent),'❗') }} {{ states(alert_ent) }}
      {%- endif %}
    {% endif %}

  weather_msg: |-
    {% set in_ok = states(indoor_sensor) not in ['unknown','unavailable', none] %}
    {% set out_ok = states(outdoor_sensor) not in ['unknown','unavailable', none] %}
    Bonjour,

    Aujourd'hui :

    {%- if out_ok %}
    • Température extérieure : {{ states(outdoor_sensor) }} °C
    {%- else %}
    • Température extérieure : (indisponible)
    {%- endif %}
    • Maximum attendu de __{{ states('sensor.meteo_maison_accuweather_temperature_ressentie_maximum_aujourd_hui') }}__
    {%- if in_ok %}
    • Température pièce principale : {{ states(indoor_sensor) }} °C
    {%- else %}
    • Température pièce principale : (indisponible)
    {%- endif %}
    
    {{ alert_text }}
    
    Envoyé le {{ now().strftime('%d/%m/%Y %H:%M') }}.

action:
  - choose:
      - conditions: "{{ tg_cfg | trim != '' }}"
        sequence:
          - alias: "Send text with selected Telegram bot"
            action: telegram_bot.send_message
            data:
              target: !input chat_ids
              title: "Météo de la maison"
              message: "{{ weather_msg }}"
              config_entry_id: "{{ tg_cfg }}"
    default:
      - alias: "Send text with default Telegram bot"
        action: telegram_bot.send_message
        data:
          target: !input chat_ids
          title: "Météo de la maison"
          message: "{{ weather_msg }}"

  - repeat:
      for_each: !input cameras
      sequence:
        - variables:
            cam_entity: "{{ repeat.item }}"
            file_path: >-
              {{ '/config/www/snapshots/' ~ cam_slug(repeat.item) ~ '_' ~ ts ~ '.jpg' }}

        - alias: "Create snapshot"
          continue_on_error: true
          action: camera.snapshot
          target:
            entity_id: "{{ cam_entity }}"
          data:
            filename: "{{ file_path }}"

        - delay: "00:00:01"

        - choose:
            - conditions: "{{ tg_cfg | trim != '' }}"
              sequence:
                - alias: "Send snapshot with selected Telegram bot"
                  action: telegram_bot.send_photo
                  data:
                    target: !input chat_ids
                    file: "{{ file_path }}"
                    caption: >-
                      {{ state_attr(cam_entity, 'friendly_name') or cam_entity }} — {{ now().strftime('%d/%m/%Y %H:%M') }}
                    config_entry_id: "{{ tg_cfg }}"
          default:
            - alias: "Send snapshot with default Telegram bot"
              action: telegram_bot.send_photo
              data:
                target: !input chat_ids
                file: "{{ file_path }}"
                caption: >-
                  {{ state_attr(cam_entity, 'friendly_name') or cam_entity }} — {{ now().strftime('%d/%m/%Y %H:%M') }}
