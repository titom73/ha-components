blueprint:
  name: "Daily Weather via Telegram (telegram_bot) — FR message + alerts"
  description: >
    Send a daily weather message in French (with optional weather alert banner) to one or more Telegram chats,
    and attach snapshots from one or more cameras. Trigger time is taken from an input_datetime helper.

  domain: automation

  input:
    time_helper:
      name: Time helper (input_datetime)
      description: "Time-only input_datetime used as the daily trigger."
      selector:
        entity:
          domain: input_datetime

    indoor_temp:
      name: Main room temperature sensor
      description: "Sensor providing the current indoor temperature (°C)."
      selector:
        entity:
          domain: sensor

    outdoor_temp:
      name: Outdoor temperature sensor
      description: "Sensor providing the current outdoor temperature (°C)."
      selector:
        entity:
          domain: sensor

    cameras:
      name: Cameras for snapshots
      description: "One or more camera entities to snapshot and send."
      selector:
        entity:
          domain: camera
          multiple: true

    chat_ids:
      name: Telegram chat IDs
      description: "One or more numeric chat IDs for your Telegram bot."
      selector:
        text:
          multiple: true
          type: text

    weather_alert_sensor:
      name: (Optional) Weather alert sensor
      description: >
        Sensor that exposes current vigilance/alert levels (e.g., from Météo-France integration).
        When provided and active, the alert banner is added to the message.
      default:
      selector:
        entity:
          domain: sensor
          multiple: false
          # Leave unfiltered; user can pick the right entity.

mode: single
trace:
  stored_traces: 20

trigger:
  # Using an input_datetime entity directly as a time trigger.
  - trigger: time
    at: !input time_helper

variables:
  # --- General helpers (English comments) ---
  ts: "{{ now().strftime('%Y%m%d-%H%M%S') }}"   # Timestamp used in filenames

  # Blueprint inputs as variables for templating
  indoor_sensor: !input indoor_temp
  outdoor_sensor: !input outdoor_temp
  cams: !input cameras
  tg_chats: !input chat_ids
  alert_ent: !input weather_alert_sensor

  # Filesystem-safe name for camera entity
  cam_slug: >-
    {% macro slug(e) -%}
      {{ e | replace('.', '_') | replace(':', '_') }}
    {%- endmacro %}

  # --- Build alert banner in French (replicates your original logic, generalized) ---
  alert_text: >-
    {# If no alert entity provided, return empty #}
    {% if not alert_ent %}{% set _ = none %}{% endif %}
    {% set ent = alert_ent %}
    {% if ent %}
      {% set ok = states(ent) not in ['unknown','unavailable', none] %}
      {% set attrs = states[ent].attributes if ok else dict() %}
      {% set ignore = ['friendly_name','icon'] %}
      {% set order = ['Rouge','Orange','Jaune'] %}
      {% set emoji = {'Rouge':'🟥','Orange':'🟧','Jaune':'🟨','Vert':'🟩'} %}
      {% set ns = namespace(parts=[]) %}
      {% for level in order %}
        {% for k in attrs %}
          {% if k not in ignore and attrs[k]==level %}
            {% set ns.parts = ns.parts + [ emoji[level] ~ ' ' ~ k ~ ' (' ~ level ~ ')' ] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
      {% if ok and ns.parts|length>0 -%}
        __Attention, alerte météo en cours__ : {{ ns.parts | join(', ') }}
      {%- elif ok and states(ent)!='Vert' -%}
        __Attention, alerte météo en cours__ : {{ emoji.get(states(ent),'❗') }} {{ states(ent) }}
      {%- else -%}{%- endif %}
    {% else %}{% endif %}

  # --- Compose the French weather message (graceful handling of unknowns) ---
  weather_msg: >-
    {% set in_ok = states(indoor_sensor) not in ['unknown','unavailable', none] %}
    {% set out_ok = states(outdoor_sensor) not in ['unknown','unavailable', none] %}
    Bonjour,

    Aujourd'hui :
    {% if out_ok -%}
    • Température extérieure : {{ states(outdoor_sensor) }} °C
    {%- else -%}
    • Température extérieure : (indisponible)
    {%- endif %}
    {% if in_ok -%}
    • Température pièce principale : {{ states(indoor_sensor) }} °C
    {%- else -%}
    • Température pièce principale : (indisponible)
    {%- endif %}

    {{ alert_text }}

    Envoyé le {{ now().strftime('%d/%m/%Y %H:%M') }}.

action:
  - alias: "Send text message to all chats (list of targets supported)"
    action: telegram_bot.send_message
    data:
      target: !input chat_ids
      title: "Météo de la maison"
      message: "{{ weather_msg }}"

  - alias: "Snapshot each camera and send to all chats"
    repeat:
      for_each: !input cameras
      sequence:
        - variables:
            cam_entity: "{{ repeat.item }}"
            file_path: >-
              {{ '/config/www/snapshots/' ~ cam_slug(repeat.item) ~ '_' ~ ts ~ '.jpg' }}

        - alias: "Create snapshot (path must exist and be allow-listed)"
          continue_on_error: true
          action: camera.snapshot
          target:
            entity_id: "{{ cam_entity }}"
          data:
            filename: "{{ file_path }}"

        - delay: "00:00:01"  # Small delay to ensure the file is written

        - alias: "Send snapshot to all chats (list of targets supported)"
          action: telegram_bot.send_photo
          data:
            target: !input chat_ids
            file: "{{ file_path }}"
            caption: >-
              {{ state_attr(cam_entity, 'friendly_name') or cam_entity }} — {{ now().strftime('%d/%m/%Y %H:%M') }}
