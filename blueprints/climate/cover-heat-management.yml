blueprint:
  name: Volets - Scenes par paliers de temperature + filtre Soleil + retour avant coucher (+ actions T1/T2/T3 + hysteresis)
  description: >
    Applique une scene selon T1/T2 avec hysteresis (H1/H2). Si la temperature reste sous T3
    pendant >=10 min, ouvre les volets. 5 min avant le coucher du soleil, restaure l etat initial.
    Filtre Soleil optionnel (azimut/elevation) et actions libres a T1/T2/T3.
  domain: automation

  input:
    temp_sensor:
      name: Capteur de temperature
      selector:
        entity:
          domain: sensor
          device_class: temperature

    t1_helper:
      name: Seuil T1 (input_number)
      selector:
        entity:
          domain: input_number

    t2_helper:
      name: Seuil T2 (input_number, > T1)
      selector:
        entity:
          domain: input_number

    t3_helper:
      name: Seuil T3 (input_number)
      selector:
        entity:
          domain: input_number

    scene_1:
      name: Scene 1 (zone T1)
      selector:
        entity:
          domain: scene

    scene_2:
      name: Scene 2 (zone T2)
      selector:
        entity:
          domain: scene

    covers:
      name: Volets a piloter
      selector:
        entity:
          domain: cover
          multiple: true

    # --- Hysteresis (deg C) ---
    hys_t1:
      name: Hysteresis autour de T1 (deg C)
      description: Mettre 0 pour desactiver
      default: 0.3
      selector:
        number:
          min: 0
          max: 5
          step: 0.1
          mode: slider
    hys_t2:
      name: Hysteresis autour de T2 (deg C)
      description: Mettre 0 pour desactiver
      default: 0.3
      selector:
        number:
          min: 0
          max: 5
          step: 0.1
          mode: slider

    # --- Filtre Soleil (optionnel) ---
    sun_filter_enabled:
      name: Activer le filtre Soleil (Azimut/Elevation)
      default: false
      selector:
        boolean: {}
    azimuth_min:
      name: Azimut min (deg)
      description: 0-360, 0=N, 90=E, 180=S, 270=O
      default: 0
      selector:
        number:
          min: 0
          max: 360
          step: 1
          mode: slider
    azimuth_max:
      name: Azimut max (deg)
      description: 0-360 (si min > max, l intervalle est considere circulaire)
      default: 360
      selector:
        number:
          min: 0
          max: 360
          step: 1
          mode: slider
    elevation_min:
      name: Elevation min (deg)
      description: Angle au-dessus de l horizon (-6 a 90)
      default: -6
      selector:
        number:
          min: -90
          max: 90
          step: 1
          mode: slider
    elevation_max:
      name: Elevation max (deg)
      default: 90
      selector:
        number:
          min: -90
          max: 90
          step: 1
          mode: slider

    # --- Actions supplementaires (optionnelles) ---
    on_t1_actions:
      name: Actions supplementaires a T1 (apres Scene 1)
      default: []
      selector:
        action: {}
    on_t2_actions:
      name: Actions supplementaires a T2 (apres Scene 2)
      default: []
      selector:
        action: {}
    on_t3_actions:
      name: Actions supplementaires a T3 (apres ouverture volets)
      default: []
      selector:
        action: {}

mode: restart
max_exceeded: silent

variables:
  v_temp_sensor: !input temp_sensor
  v_t1: !input t1_helper
  v_t2: !input t2_helper
  v_t3: !input t3_helper
  v_scene_1: !input scene_1
  v_scene_2: !input scene_2
  v_covers: !input covers

  v_h1: !input hys_t1
  v_h2: !input hys_t2

  v_sun_filter_enabled: !input sun_filter_enabled
  v_az_min: !input azimuth_min
  v_az_max: !input azimuth_max
  v_el_min: !input elevation_min
  v_el_max: !input elevation_max

  T: "{{ states(v_temp_sensor) | float(9999) }}"
  T1: "{{ states(v_t1) | float(9999) }}"
  T2: "{{ states(v_t2) | float(9999) }}"
  T3: "{{ states(v_t3) | float(-9999) }}"
  H1: "{{ v_h1 | float(0) }}"
  H2: "{{ v_h2 | float(0) }}"

  # Mesures Soleil
  SUN_AZ: "{{ state_attr('sun.sun', 'azimuth') | float(0) }}"
  SUN_EL: "{{ state_attr('sun.sun', 'elevation') | float(-90) }}"

  # Azimut dans [az_min, az_max] (gestion du tour de cadran)
  SUN_AZ_OK: >-
    {% set amin = v_az_min | float(0) %}
    {% set amax = v_az_max | float(360) %}
    {% set a = SUN_AZ %}
    {% if amin <= amax %}
      {{ a >= amin and a <= amax }}
    {% else %}
      {{ a >= amin or a <= amax }}
    {% endif %}
  # Elevation dans [el_min, el_max]
  SUN_EL_OK: "{{ SUN_EL >= (v_el_min|float(-90)) and SUN_EL <= (v_el_max|float(90)) }}"
  SUN_FILTER_PASSED: "{{ (not v_sun_filter_enabled) or (SUN_AZ_OK and SUN_EL_OK) }}"

  # Conditions d application avec hysteresis
  APPLY_SCENE2: "{{ (T >= (T2 + H2)) and (T2 > T1) }}"
  APPLY_SCENE1: "{{ (T >= (T1 + H1)) and (T < (T2 - H2)) and (T2 > T1) and ((T2 - H2) > (T1 + H1)) }}"

  # Scene snapshot (ID derive de l entity_id)
  SNAP_ID: "{{ (this.entity_id | replace('.', '_')) ~ '_snapshot' }}"
  SNAP_ENTITY: "{{ 'scene.' ~ SNAP_ID }}"
  SNAP_EXISTS: "{{ not states(SNAP_ENTITY) in ['unknown','unavailable',''] }}"

trigger_variables:
  t_sensor: !input temp_sensor
  t_t3: !input t3_helper

trigger:
  - id: evaluate
    platform: state
    entity_id:
      - !input temp_sensor
      - !input t1_helper
      - !input t2_helper

  - id: cooldown
    platform: template
    value_template: "{{ states(t_sensor)|float(9999) < states(t_t3)|float(9999) }}"
    for: "00:10:00"

  - id: sun_change
    platform: state
    entity_id: sun.sun

  - id: pre_sunset_restore
    platform: sun
    event: sunset
    offset: "-00:05:00"

condition: []

action:
  - choose:
      # 1) Restaurer etat initial 5 min avant coucher (si pas deja < T3)
      - conditions: "{{ trigger.id == 'pre_sunset_restore' and (T >= T3) }}"
        sequence:
          - if: "{{ SNAP_EXISTS }}"
            then:
              - action: scene.turn_on
                target:
                  entity_id: "{{ SNAP_ENTITY }}"
            else: []

      # 2) T < T3 pendant 10 min -> ouvrir volets + actions T3
      - conditions: "{{ trigger.id == 'cooldown' }}"
        sequence:
          - action: cover.open_cover
            target:
              entity_id: !input covers
          - alias: Actions supplementaires T3
            sequence: !input on_t3_actions

      # 3) Evaluation (hysteresis + filtre Soleil) -> scenes + actions T1/T2
      - conditions: "{{ (trigger.id == 'evaluate') or (trigger.id == 'sun_change' and v_sun_filter_enabled) }}"
        sequence:
          - condition: template
            value_template: "{{ SUN_FILTER_PASSED }}"

          # Snapshot juste avant la 1ere scene
          - if: "{{ not SNAP_EXISTS and (T >= (T1 + H1)) }}"
            then:
              - action: scene.create
                data:
                  scene_id: "{{ SNAP_ID }}"
                  snapshot_entities: !input covers

          # Scene 2 (haut) avec hysteresis
          - choose:
              - conditions: "{{ APPLY_SCENE2 }}"
                sequence:
                  - action: scene.turn_on
                    target:
                      entity_id: !input scene_2
                  - alias: Actions supplementaires T2
                    sequence: !input on_t2_actions

              # Scene 1 (milieu) avec hysteresis
              - conditions: "{{ APPLY_SCENE1 }}"
                sequence:
                  - action: scene.turn_on
                    target:
                      entity_id: !input scene_1
                  - alias: Actions supplementaires T1
                    sequence: !input on_t1_actions
            default: []
    default: []
